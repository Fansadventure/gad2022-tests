package gad.tests;

import gad.dijkstra.Dijkstra;
import gad.dijkstra.Graph;
import gad.dijkstra.Result;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import org.opentest4j.AssertionFailedError;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Random;
import java.util.stream.Stream;

import static gad.tests.FirstGraphTest.write;
import static org.junit.jupiter.api.Assertions.assertTrue;

public class PerformanceTest {
    public static Stream<Arguments> size10000Params() {
        return Stream.of(
                Arguments.of(10000, 10, 1000),
                Arguments.of(10000, 15, 1000),
                Arguments.of(10000, 25, 1000),
                Arguments.of(10000, 35, 1000),
                Arguments.of(10000, 5, 1000),
                Arguments.of(10000, 20, 1000)
        );
    }

    @ParameterizedTest
    @MethodSource("size10000Params")
    void size10000Test1(int size, int edges, int millisecons) {
        if(size<10000){
            return;
        }
        try {
            Thread executor = Thread.currentThread();
            (new Thread(() -> {
                ArrayList<Integer> starts = new ArrayList<>();
                ArrayList<Integer> ends = new ArrayList<>();
                int sizeedges = size * edges;
                Random random = new Random();
                int[] format = new int[sizeedges];
                format[0] = size;
                for (int i = 1; i < sizeedges; i++) {
                    int r = random.nextInt(-1, size);
                    format[i] = r;
                    if (i == 1 && r != -1) {
                        starts.add(r);
                    }
                    if (format[i - 1] == -1) {
                        ends.add(format[i - 2]);
                        starts.add(format[i]);
                    }
                }
                ends.add(format[format.length - 1]);
                if (starts.size() != ends.size()) {
                    throw new RuntimeException("peakaboo");
                }
                Dijkstra dijkstra = new Dijkstra();
                Graph graph = Graph.of(format);
                for (int i = 0; i < starts.size(); i++) {
                    assertPerformance(millisecons, starts.get(i), ends.get(i), dijkstra, graph);
                }
                executor.interrupt();
            })).start();
            Thread.sleep(30000); // 30 seconds
            throw new AssertionFailedError("\nTest timeout after 30 seconds. Bad performance");
        }catch (InterruptedException interruptedException){
            write("Performance is fine");
        }
    }
    public static Stream<Arguments> getRandomGraphSizes() {
        return Stream.of(
                Arguments.of(1000, 2500, 15),
                Arguments.of(1000, 5000, 35),
                Arguments.of(1000, 2500, 10),
                Arguments.of(1000, 5000, 70),
                Arguments.of(1000, 2500, 25),
                Arguments.of(1000, 5000, 50),
                Arguments.of(1000, 10000, 21),
                Arguments.of(1000, 10000, 41)
        );
    }

    @ParameterizedTest
    @MethodSource("getRandomGraphSizes")
    void performanceTest2(int millisecons, int size, int edges) {
        int start;
        int end = -1;
        int sizeedges = size * edges;
        Random random = new Random();
        int[] format = new int[sizeedges];
        format[0] = size;
        for (int i = 1; i < sizeedges; i++) {
            int r = random.nextInt(-1, size);
            format[i] = r;
            if (end == -1 && r == -1) {
                end = format[i - 1];
            }
        }
        start = format[1];
        Dijkstra dijkstra = new Dijkstra();
        Graph graph = Graph.of(format);
        assertPerformance(millisecons, start, end, dijkstra, graph);
    }

    private void assertPerformance(int millisecons, int start, int end, Dijkstra dijkstra, Graph graph) {
        long startTime = System.nanoTime();
        try {
            Graph.Node startNode = graph.getNode(start);
            Graph.Node endNode = graph.getNode(end);
            Thread executor = Thread.currentThread();
            (new Thread(() -> {
                dijkstra.findRoute(graph, startNode, endNode, emptyResult());
                dijkstra.getShortestPath();
                executor.interrupt();
            })).start();
            Thread.sleep(millisecons);
            long duration = System.nanoTime() - startTime;
            assertTrue(duration <= million * millisecons,
                    "Dijkstra calculation took more than " + millisecons + " millisecondsecond\n" +
                            "Dijkstra Duration: "+time(duration));
        } catch (InterruptedException exception) {
            long durationNanoseconds = System.nanoTime() - startTime;
            write("Test constraints");
            write("Graph size: " + graph.getSize());
            write("Test on nodes: " + start + " - " + end);
            write("Dijkstra duration: " + time(durationNanoseconds) + "\n");
        }
    }


    @ParameterizedTest
    @MethodSource("getGraphIndices")
    void performanceTest1(int graphIndex, int start, int end, int millisecons) {
        Dijkstra dijkstra = new Dijkstra();
        Graph graph = getPerformanceGraph(graphIndex);
        assertPerformance(millisecons, start, end, dijkstra, graph);
    }

    public static Result emptyResult() {
        return new Result() {
            @Override
            public void addNode(int id, int pathLength) {
            }

            @Override
            public void addNeighbour(int id) {
            }

            @Override
            public void addNeighbours(Collection<Integer> ids) {
            }
        };
    }


    public static Stream<Arguments> getGraphIndices() {
        return Stream.of(
                Arguments.of(1, 39, 65, 100),
                Arguments.of(1, 61, 54, 100),
                Arguments.of(1, 1, 94, 100),
                Arguments.of(1, 85, 7, 100),
                Arguments.of(1, 6, 87, 100),
                Arguments.of(1, 19, 29, 100),
                Arguments.of(1, 12, 86, 100),
                Arguments.of(1, 84, 70, 100),
                Arguments.of(1, 58, 48, 100),
                Arguments.of(1, 95, 89, 100),
                Arguments.of(1, 19, 23, 100),
                Arguments.of(1, 41, 81, 100),
                Arguments.of(1, 82, 65, 100),
                Arguments.of(1, 83, 20, 100),
                Arguments.of(1, 32, 85, 100),
                Arguments.of(2, 182, 190, 100),
                Arguments.of(2, 270, 94, 100),
                Arguments.of(2, 307, 323, 100),
                Arguments.of(2, 243, 284, 100),
                Arguments.of(3, 36, 230, 100),
                Arguments.of(3, 92, 235, 100),
                Arguments.of(3, 85, 153, 100),
                Arguments.of(4, 5, 1, 100),
                Arguments.of(4, 33, 16, 100),
                Arguments.of(4, 33, 36, 100)
        );
    }

    public static Graph getPerformanceGraph(int graphIndex) {
        return switch (graphIndex) {
            case 1 ->
                    Graph.of(1000, 39, 92, 6, 55, 54, 45, 76, 2, 88, 49, 16, 87, 54, 13, 36, 47, 10, 50, 93, 44, 45, 19, 77, 27, 12, 43, 24, 57, 98, 6, 1, 73, 27, 61, 22, 57, 61, 59, 30, 86, 88, 50, 98, 94, 39, 65, -1,
                            61, 59, 60, 34, 87, 31, 5, 6, 20, 61, 89, 48, 10, 23, 42, 11, 84, 94, 29, 45, 80, 81, 6, 23, 90, 26, 54, -1,
                            1, 5, 56, 88, 36, 27, 39, 1, 76, 35, 35, 25, 93, 32, 68, 50, 40, 24, 27, 69, 69, 1, 14, 63, 13, 25, 49, 81, 21, 23, 42, 33, 41, 54, 59, 99, 36, 44, 36, 18, 80, 44, 93, 72, 62, 10, 65, 70, 92, 45, 58, 4, 53, 94, 12, 12, 91, 66, 98, 99, 98, 15, 66, 40, 17, 46, 96, 39, 78, 2, 6, 60, 65, 61, 20, 19, 88, 65, 12, 87, 93, 66, 12, 4, 88, 32, 35, 63, 18, 34, 49, 24, 56, 74, 94, 40, 77, 28, 93, 20, 45, 65, 29, 36, 46, 0, 93, 3, 14, 61, 79, 79, 71, 68, 2, 1, 47, 86, 30, 20, 0, 48, 57, 88, 47, 98, 33, 37, 46, 19, 21, 67, 95, 47, 3, 64, 39, 20, 47, 69, 48, 41, 27, 74, 82, 28, 47, 93, 99, 54, 9, 75, 28, 41, 63, 24, 68, 14, 65, 24, 11, 94, -1,
                            85, 14, 94, 6, 70, 90, 31, 77, 54, 35, 26, 19, 5, 36, 61, 96, 20, 91, 71, 15, 72, 23, 14, 2, 18, 37, 7, 96, 78, 17, 27, 97, 67, 78, 88, 17, 8, 99, 75, 10, 65, 72, 84, 14, 73, 93, 80, 39, 5, 16, 10, 16, 60, 27, 2, 62, 42, 19, 63, 85, 54, 17, 25, 23, 39, 45, 3, 93, 84, 20, 10, 48, 23, 94, 61, 82, 4, 76, 49, 7, 51, 36, 12, 68, 26, 31, 54, 18, 70, 87, 6, 22, 10, 93, 31, 55, 27, 96, 79, 39, 13, 74, 79, 62, 70, 53, 76, 50, 60, 43, 19, 23, 28, 68, 6, 49, 40, 22, 57, 95, 98, 93, 89, 88, 19, 94, 78, 79, 44, 45, 69, 76, 32, 7, -1,
                            6, 6, 41, 78, 21, 33, 3, 39, 31, 66, 0, 49, 26, 58, 9, 53, 27, 71, 62, 2, 82, 17, 63, 8, 11, 59, 20, 53, 56, 5, 49, 79, 3, 18, 78, 95, 36, 25, 46, 74, 97, 86, 87, -1,
                            19, 29, 88, 54, 25, 81, 80, 46, 14, 77, 2, 92, 29, 82, 24, 87, 51, 82, 21, 89, 66, 25, 65, 23, 63, 92, 96, 17, 39, 82, 50, 82, 39, 70, 64, 94, 62, 33, 70, 6, 99, 77, 43, 94, 77, 46, 20, 17, 93, 56, 27, 56, 64, 24, 82, 0, 5, 86, 2, 16, 70, 11, 35, 2, 53, 32, 73, 40, 68, 59, 70, 74, 62, 64, 24, 49, 89, 22, 10, 60, 73, 68, 42, 20, 32, 66, 7, 15, 71, 50, 72, 54, 69, 87, 51, 68, 90, 8, 26, 34, 21, 30, 66, 0, 4, 48, 89, 54, 86, 33, 68, 54, 32, 15, 39, 70, 45, 95, 91, 80, 85, 31, 49, 11, 88, 56, 45, 19, 46, 0, 30, 10, 70, 42, 91, 16, 33, 91, 35, 26, 51, 47, 24, 71, 54, 68, 55, 47, 9, 56, 6, 64, 75, 43, 79, 92, 37, 16, 45, 99, 84, 23, 50, 60, 89, 77, 36, 40, 15, 85, 38, 52, 22, 56, 82, 36, 2, 64, 97, 96, 51, 28, 28, 24, 22, 91, 65, 51, 29, 13, 59, 71, 45, 75, 82, 81, 29, -1,
                            12, 64, 6, 34, 47, 2, 48, 4, 15, 42, 65, 72, 4, 11, 23, 19, 94, 30, 59, 42, 23, 29, 70, 36, 79, 37, 53, 66, 55, 73, 10, 30, 52, 44, 30, 67, 85, 35, 41, 42, 91, 36, 77, 34, 10, 43, 44, 3, 9, 88, 33, 25, 74, 15, 76, 6, 50, 78, 21, 60, 54, 51, 31, 16, 10, 27, 32, 24, 71, 27, 24, 50, 86, -1,
                            84, 10, 4, 47, 12, 73, 55, 62, 73, 70, -1,
                            58, 68, 64, 63, 48, 64, 33, 12, 1, 27, 17, 65, 46, 55, 71, 65, 10, 3, 65, 52, 1, 84, 8, 34, 74, 31, 34, 61, 82, 72, 48, -1,
                            95, 67, 33, 86, 37, 2, 82, 95, 28, 11, 58, 8, 61, 20, 77, 40, 48, 75, 45, 44, 83, 43, 39, 14, 5, 70, 24, 80, 32, 27, 22, 47, 68, 89, -1,
                            19, 85, 75, 46, 11, 37, 0, 53, 22, 30, 92, 46, 12, 59, 14, 23, -1,
                            41, 53, 60, 65, 81, 1, 70, 1, 50, 68, 95, 81, 97, 80, 98, 95, 22, 55, 82, 32, 43, 13, 5, 64, 23, 54, 63, 26, 90, 11, 16, 78, 18, 68, 50, 31, 51, 12, 94, 66, 68, 67, 28, 58, 28, 23, 4, 20, 71, 19, 51, 18, 56, 65, 13, -1,
                            72, 40, 35, 34, 55, 46, 80, 16, 50, 79, 33, 97, 52, 58, 70, 79, 11, 81, -1,
                            82, 85, 39, 79, 9, 38, 72, 91, 33, 84, 66, 9, 34, 86, 63, 69, 71, 1, 46, 78, 54, 88, 35, 71, 77, 1, 46, 25, 92, 64, 43, 97, 16, 81, 1, 76, 24, 33, 50, 73, 30, 45, 72, 78, 71, 53, 39, 71, 9, 32, 53, 21, 97, 51, 9, 31, 75, 58, 11, 55, 96, 55, 79, 81, 88, 9, 78, 76, 96, 45, 10, 69, 86, 35, 22, 5, 65, -1,
                            83, 76, 55, 93, 71, 33, 49, 82, 64, 98, 15, 98, 14, 54, 69, 92, 36, 20, 60, 3, 50, 12, 30, 73, 42, 72, 17, 73, 19, 81, 64, 54, 20, 7, 52, 54, 17, 20, -1,
                            32, 2, 88, 39, 10, 59, 60, 2, 31, 49, 61, 67, 89, 94, 91, 29, 61, 20, 34, 3, 93, 60, 86, 85);
            case 2 ->
                    Graph.of(1000, 182, 308, 88, 53, 89, 298, 71, 279, 51, 266, 261, 13, 155, 43, 289, 10, 4, 22, 117, 216, 141, 80, 50, 298, 37, 278, 75, 198, 319, 80, 40, 111, 43, 106, 266, 31, 117, 285, 68, 46, 283, 7, 8, 86, 106, 26, 164, 330, 207, 140, 118, 284, 314, 65, 267, 300, 180, 211, 60, 105, 102, 114, 6, 325, 263, 315, 321, 31, 113, 315, 243, 63, 165, 300, 216, 242, 234, 295, 143, 306, 250, 320, 39, 129, 113, 92, 147, 300, 83, 277, 182, 282, 178, 217, 314, 308, 275, 227, 234, 275, 109, 59, 22, 87, 326, 46, 57, 264, 279, 40, 185, 66, 74, 212, 42, 291, 87, 222,
                            330, 49, 186, 298, 326, 289, 102, 2, 55, 26, 62, 66, 177, 304, 306, 304, 276, 62, 294, 151, 110, 291, 22, 48, 262, 150, 6, 300, 268, 141, 16, 298, 324, 184, 47, 154, 193, 144, 263, 12, 214, 38, 235, 70, 188, 203, 290, 68, 90, 213, 332, 95, 42, 328, 51, 111, 239, 153, 303, 22, 2, 70, 285, 139, 69, 112, 79, 173, 97, 214, 307, 247, 325, 71, 145, 83, 104, 141, 196, 6, 228, 141, 258, 264, 193, 285, 188, 203, 29, 7, 299, 13, 78, 274, 122, 226, 161, 63, 43, 53, 274, 21, 319, 230, 323, 15, 51, 100, 28, 22, 66, 266, 228, 102, 303, 229, 303, 124, 302, 297, 194, 156, 9, 171, 317, 257, 15, 291, 19, 321, 30, 54, 192, 319, 157, 30, 34,
                            291, 132, 325, 86, 269, 266, 124, 11, 191, 241, 188, 26, 191, 109, 169, 270, 136, 114, 298, 243, 227, 76, 285, 315, 151, 209, 81, 296, 17, 133, 44, 311, 66, 41, 328, 36, 297, 46, 174, 238, 11, 73, 68, 53, 267, 112, 6, 70, 32, 187, 328, 54, 62, 100, 228, 256, 212, 86, 200, 34, 85, 198, 325, 15, 95, 181, 157, 326, 296, 104, 45, 158, 137, 19, 100, 83, 315, 188, 192, 315, 161, 300, 241, 73, 315, 308, 306, 131, 197, 250, 263, 110, 99, 188, 141, 170, 222, 249, 209, 17, 304, 60, 161, 277, 35, 332, 117, 126, 300, 161, 77, 329, 6, 260, 284, 157, 50, 177, 5, 324, 71, 59, 241, 199, 330, 88, 171, 76, 100, 302, 202, 8, 286, 320, 269, 307,
                            325, 11, 298, 282, 104, 256, 22, 59, 19, 269, 309, 122, 322, 264, 5, 272, 304, 160, 269, 140, 118, 294, 298, 14, 258, 164, 25, 223, 229, 266, 119, 73, 45, 191, 235, 102, 151, 204, 159, 100, 289, 18, 142, 126, 277, 183, 317, 282, 297, 75, 195, 34, 77, 26, 157, 67, 32, 38, 253, 82, 53, 36, 73, 108, 136, 303, 61, 193, 293, 171, 263, 320, 19, 118, 29, 26, 195, 240, 139, 122, 145, 239, 262, 30, 81, 194, 191, 259, 251, 70, 20, 206, 14, 192, 272, 148, 136, 166, 24, 315, 252, 155, 108, 111, 59, 315, 170, 100, 201, 279, 212, 188, 208, 44, 244, 182, 217, 36, 306, 43, 312, 219, 258, 139, 128, 128, 306, 227, 9, 315, 208, 216, 59, 190, -1,
                            270, 34, 281, 237, 76, 241, 17, 23, 217, 171, 261, 3, 116, 293, 0, 13, 301, 1, 289, 300, 207, 233, 59, 142, 83, 140, 43, 73, 36, 134, 120, 113, 278, 61, 289, 252, 85, 119, 297, 108, 162, 211, 24, 46, 72, 239, 214, 7, 98, 271, 299, 286, 98, 163, 249, 196, 142, 12, 119, 4, 66, 131, 274, 48, 327, 44, 103, 286, 174, 79, 223, 298, 19, 26, 26, 215, 274, 108, 96, 167, 101, 119, 164, 94, 220, 222, 127, 81, 192, 256, 135, 69, 199, 153, 101, 163, 82, 152, 19, 319, 173, 37, 2, 305, 160, 79, 80, 226, 61, 24, 195, 56, 94, -1,
                            307, 34, 29, 19, 263, 88, 110, 232, 2, 240, 175, 319, 233, 177, 163, 46, 50, 275, 130, 294, 186, 329, 120, 205, 79, 261, 31, 177, 181, 11, 194, 78, 331, 52, 316, 110, 206, 95, 260, 289, 294, 251, 106, 47, 311, 303, 231, 174, 54, 321, 127, 227, 25, 101, 26, 316, 68, 64, 145, 130, 39, 5, 105, 281, 291, 85, 121, 74, 0, 301, 147, 314, 296, 274, 36, 256, 182, 158, 179, 281, 142, 297, 165, 202, 160, 266, 98, 181, 54, 283, 281, 3, 305, 246, 257, 6, 172, 277, 190, 317, 295, 179, 148, 237, 198, 296, 284, 49, 100, 288, 209, 114, 0, 285, 51, 49, 161, 212, 121, 297, 156, 16, 289, 282, 332, 113, 267, 70, 85, 309, 307, 231, 219, 68, 65, 127, 65, 239, 65, 299, 46, 124, 152, 113, 303, 117, 309,
                            194, 61, 69, 146, 288, 267, 332, 88, 212, 38, 37, 246, 204, 137, 330, 11, 178, 318, 269, 101, 221, 323, -1,
                            243, 60, 306, 228, 176, 35, 263, 97, 209, 237, 174, 155, 235, 281, 216, 285, 50, 23, 168, 44, 195, 134, 205, 315, 19, 206, 236, 202, 319, 214, 179, 40, 5, 50, 316, 66, 177, 311, 317, 291, 296, 215, 318, 181, 46, 45, 270, 149, 56, 173, 211, 213, 238, 219, 132, 225, 109, 27, 301, 16, 129, 224, 13, 30, 109, 131, 54, 119, 294, 112, 32, 321, 141, 228, 145, 220, 36, 176, 52, 204, 321, 180, 231, 45, 205, 152, 68, 316, 32, 247, 269, 139, 237, 39, 10, 23, 53, 69, 170, 66, 268, 36, 233, 144, 0, 234, 57, 114, 138, 151, 58, 1, 68, 221, 51, 321, 47, 242, 320, 325, 102, 173, 130, 213, 22, 284, 17, 139, 22, 105, 319, 21, 169, 96, 127, 286, 273, 28, 142, 231, 262, 319, 169, 212, 22, 136, 324, 188, 15, 68, 180, 28, 3, 198, 184, 146, 89, 332,
                            307, 263, 72, 98, 99, 179, 250, 81, 197, 191, 120, 100, 97, 151, 115, 286, 9, 315, 208, 141, 40, 291, 260, 236, 199, 191, 130, 184, 131, 28, 292, 284);
            case 3 ->
                    Graph.of(1000, 36, 160, 157, 249, 107, 171, 68, 25, 167, 57, 185, 146, 203, 69, 60, 147, 172, 166, 87, 168, 213, 55, 123, 167, 185, 34, 87, 160, 152, 50, 230, 185, 92, 133, 229, 112, 41, 139, 98, 182, 182, 218, 197, 206, 32, 184, 230, -1,
                            119, 206, 248, 189, 231, 91, 100, 142, 42, 134, 117, 236, 162, 206, 248, 239, 54, 234, 39, 147, 103, 136, 39, 140, 4, 34, 186, 222, 89, 98, 102, 214, 9, 242, 225, 165, 45, 131, 91, 33, 97, 109, 5, 20, 197, 191, 10, 63, 181, 129, 40, 31, 73, 6, 71, 148, 15, 173, 35, 117, 164, 72, 106, 232, 62, 39, 80, 85, 96, -1,
                            103, 69, 180, 106, 205, 141, 162, 115, 118, 123, 64, 161, 89, 184, 25, 240, 38, 147, 118, 48, 65, 210, 248, 164, 108, 128, 81, 144, 0, 53, 73, 212, 130, 24, 149, 139, 199, 186, 4, 76, 14, 68, 188, 36, 183, 4, 49, 192, 102, 247, 91, 75, 170, 166, 39, 227, 56, 93, 35, 11, 233, 213, 96, -1,
                            191, 39, 216, 213, 177, 167, 70, 175, 150, 146, 161, 101, 34, 205, 68, 49, 31, 87, 217, 174, 141, 56, 80, 23, 191, 148, 118, 144, 122, 205, 232, 37, 113, 61, 57, 170, 31, 154, 222, 69, 109, 130, 138, 134, 119, 103, 116, 169, 218, 11, 228, 37, 230, 90, 40, 125, 162, 186, 35, 48, 31, 196, 136, 49, 90, 146, 226, 159, 119, 125, 197, 1, 24, 58, 49, 155, 73, 212, 13, 221, 88, 85, 110, 159, 138, 43, 9, 77, 97, 10, 18, 119, 21, 167, 80, 76, 60, 83, 70, 100, 32, 55, 226, 45,
                            158, 214, 195, 176, 175, 83, 181, 93, 249, 92, 148, 44, 10, 218, 186, 146, 199, 14, 84, 218, 63, 97, 233, 223, 168, 119, 217, 200, 122, 212, 137, 207, 203, 92, 155, 53, 123, 148, 188, 144, 195, 208, 7, 76, 104, 158, 206, 22, 40, 217, 191, 4, 197, 42, 138, 197, 167, 198, 190, 217, 230, 195, 232, 55, 63, 28, 129, 83, 214, 63, 229, 41, 143, 78, 143, 0, 199, 229, 230, 180, 17, 132, 20, 70, 73, 18, 141, 148, 214, 246, 211, 209, 166, 123, 190, 81, 223, 147, 85, 133, 246, 101, 95, 5, 46, 128, 104, 163, 70, 121, 124, 111, 129, -1,
                            92, 217, 100, 119, 66, 233, 249, 14, 76, 36, 82, 188, 138, 220, 43, 215, 220, 80, 131, 3, 202, 26, 181, 115, 97, 152, 80, 220, 195, 101, 94, 107, 198, 85, 19, 241, 221, 229, 61, 233, 83, 37, 164, 223, 186, 82, 19, 183, 150, 43, 248, 176, 221, 155, 149, 12, 89, 240, 67, 163, 25, 12, 173, 78, 36, 127, 15, 36, 27, 119, 64, 9, 173, 130, 207, 26, 103, 179, 207, 22, 192, 233, 52, 103, 163, 148, 15, 80, 102, 226, 244, 58, 62, 95, 140, 10, 108, 108, 206, 234, 164, 234, 145, 221, 175, 112, 134, 4, 183, 228, 183, 112, 100, 137, 65, 44, 181, 200, 17, 90, 26, 207, 5, 29, 100, 119, 208, 90, 6, 205, 102, 185, 32, 177, 157, 83, 16, 114, 38, 4, 101, 11, 235, 227, 86, 111, 169, 249, 199, 13, 112, 228, 84, 66, 132, 38, 211, 40, 53, 44, 4, 15, 0,
                            204, 214, 50, 227, 166, 99, 77, 213, 38, 23, 185, 139, 167, 240, 210, 154, 161, 6, 151, 188, 82, 130, 6, 24, 36, 204, 118, 16, 133, 10, 151, 174, 156, 83, 30, 22, 17, 145, 66, 26, 1, 222, 150, 240, 20, 39, 118, 97, 125, 249, 34, 117, 138, 142, 186, 79, 145, 16, 50, 244, 174, 235, -1,
                            106, 4, 97, 181, 99, 28, 78, 235, 36, 34, 241, 65, 176, 14, 80, 160, 215, 218, 135, 237, 135, 227, 60, 138, 225, 164, 82, 70, 247, 226, 226, 133, 153, 115, 231, 52, 116, 185, 127, 183, 5, 127, 13, 219, 162, 77, 127, 52, 244, 11, 158, 149, 212, 28, 70, 114, 31, 175, 66, 194, 195, 113, 196, 11, 7, 30, 155, 151, 220, 110, 87, 97, 102, 249, 149, 110, 158, 153, 99, 145, 48, 24, 34, 85, 113, 178, 170, 217, 114, 148, 199, 157, 91, 65, 9, 74, 9, 161, 126, 242, 162, 235, 61, 159, 56, 215, 117, 218, 38, 114, 109, 86, 197, 239, 100, 8, 15, 226, 235, 178, 106, 222, 45, 84, 235, 108, 221, 11, 87, 226, 120, 98, 142, 85, 164, 229, 187, 139, 156, 145, 89, 54, 182, 151, 6, 233, 107, 62, 185, 73, 132, 150, 236, 168, 115, 27, 186, 149, 210, 43, 48, 30,
                            112, 207, 79, 134, 202, 120, 27, 68, 82, 208, 55, 169, 47, 0, 184, 134, 227, 230, 91, 18, 63, 247, 97, 20, 229, 118, 77, 197, 243, 136, 102, 1, 29, 32, 232, 194, 81, 16, 50, 127, 72, 161, 160, 216, 158, 44, 124, 189, 211, 45, 212, 83, 230, 97, 93, 89, 33, 203, 68, 64, 134, 83, 72, 56, 117, 195, 1, 142, 240, 232, 57, 239, 161, 223, 95, 247, 34, 245, 182, 83, 121, 187, 8, 26, 142, 104, 194, 14, 24, 97, 6, 34, 141, 103, 13, 33, 218, 133, 72, 173, 127, 49, 60, 27, 83, 62, 107, 218, 214, 180, 38, 197, 40, 53, 227, 1, 11, 183, 116, 65, 28, 83, 177, 71, 20, 182, 20, 224, 215, 113, 242, 10, 16, 158, 247, 48, 213, 218, 72, 144, 148, 141, 157, 57, 165, 101, -1,
                            85, 107, 174, 8, 115, 2, 4, 188, 177, 76, 223, 2, 206, 134, 170, 214, 160, 182, 163, 128, 24, 210, 21, 217, 177, 147, 230, 154, 17, 242, 44, 143, 211, 109, 43, 54, 181, 181, 66, 19, 239, 233, 203, 150, 150, 174, 146, 211, 40, 217, 72, 90, 147, 89, 152, 136, 178, 203, 234, 204, 84, 211, 117, 247, 153);
            case 4 -> Graph.of(1000,
                    5, 31, 8, 38, 15, 38, 3, 3, 3, 5, 23, 4, 6, 26, 3, 5, 4, 20, 14, 17, 32, 1, 10, 38, 32, 8, 29, 8, 6, 34, 37, 17, 4, 34, 19, 32, 32, 20, 31, 22, 23, 25, 11, 3, 26, 12, 22, 23, 37, 35, 17, 5, 6, 1, 11, 5, 12, 5, 25, 5, 8, 17, 36, 9, 36, 1, -1,
                    32, 24, 39, 29, 12, 1, 16, 34, 17, 22, 24, 24, 0, 8, 25, 26, 15, 12, 29, 31, 28, 6, 34, 38, 23, 15, 36, 15, 20, 10, 14, 37, 34, -1,
                    17, 15, 38, 28, 0, 14, 30, 2, 11, 24, 12, 6, 15, 32, 14, 20, 26, 21, 9, -1,
                    13, 5, 27, 24, 37, 10, 4, 25, 16, 13, 28, 30, 0, 13, 26, 12, 13, 39, 23, 27, 25, 11, 18, 25, 8, 29, 18, 12, 29, 28, 30, 35, 12, 10, 19, 33, 5, 30, -1,
                    15, 31, 37, 29, 19, 37, 31, 36, 18, 29, 19, 9, 38, 34, 21, -1,
                    33, 3, 24, 11, 23, 9, 20, 27, 5, 25, 13, 35, 1, 19, 15, 6, 28, 6, 13, 37, 27, 33, 36, 7, 2, 5, 11, 33, 10, 0, 25, 36, 23, 33, 26, 16, 3, 28, 30, 33, 8, 4, 24, 10, 14, 1, 35, 37, 8, 6, 32, 13, 2, 17, 35, 27, 10, 15, 6, 18, 29, 33, 36, 20, 35, 12, 25, 7, 9, 38, 38, 17, 16, 10, 6, 7, 26, 33, 24, 26, 18, 0, -1,
                    26, 5, 3, 6, 20, 36, 38, 18, 17, 10, 33, 24, 33, 5, 36, 17, 9, 18, 27, 3, 1, 29, 6, 31, 18, 7, 39, 17, -1,
                    30, 9, 6, 25, 5, 33, 37, 29, 18, 22, 0, 23, 20, 24, 20, 33, 4, 5, 16, 34, 14, 12, 7, 17, 21, 9, 30, 39, 26, 23, 31, 17, -1,
                    18, 1, 4, 15, 1, 39, 19, 4, 1, 15, 31, 2, 2, 19, 14, 29, 36, 15, 9, 30, 16, 35, 16, 14, 12, 30, 1, 14, 28, 19, 32, 37, 2, 24, 12, 25, 15, 30, 32, 27, 6, -1,
                    13, 24, 11, 26, 36, 19, 22, 33, 24, 25, 17, 16, 35, 6, 9, 36, 18, 21, 6, 19, 11, 29, 18, 9, 19, 8, -1,
                    38, 28, 33, 9, 1, 35, 4, -1,
                    1, 26, 15, 27, 23, 1, 26, 4, 34, 24, 13, 3, -1,
                    33, 39, 31, 8, 23, 3, 5, 25, 29, 1, 16, 31, 11, 21, 5, 36, 29, 8, 27, 15, 1, 33, 39, 15, 28, 38, 25, 39, 36, 24, 5, 20, 5, 11, 39, 22, 2, 15, 34, 27, 31, 16, 24, 34, 15, 12, 11, 36, 9, 25, 16, 16, 11, 4, 11, 32, 31, 1, 1, 30, 26, 3, 32, 38, 38, 30, 38, 21, 25, 13, 33, 24, 5, 19, 37, 19, 26, 36, 11, 0, 11, 27, 14, 28, 1, 20, 18, 12, 28, 14, 17, 24, 39, 4, 31, 24, 20, 18, 25, 13, 4, 16, -1,
                    33, 29, 33, 22, 37, 19, 27, 7, 1, 24, 28, 38, 12, 25, 9, 26, 9, 0, 37, 3, 9, 34, 0, 10, 10, 1, 23, 18, 25, 38, -1,
                    21, 36, 33, 28, 14, 13, 31, 29, 14, 9, 33, 26, 23, 37, 10, 32, 24, 13, 37, 14, 9, 1, 9, 3, 36, 22, 32, 23, 10, 13, 20, 38, 15, 30, 3, 34, 30, 25, 35, 14, 26, 25, 29, 36, 8, 33, 17, 28, 5, 20, 37, 8, 10, 3, 10, 32, 9, 7, 36, 28, 27, 33, 24, 14, 0, 15, 20, 34, 23, 5, 9, 20, 15, 6, 28, 37, 19, 36, 30, 35, 21, 1, 12, 31, 15, 39, 14, 2, 28, 34, 18, 1, 9, 11, 12, 19, 6, 4, 2, 13, 4, 30, 18, 9, 18, 31, 3, 2, 14, 24, 37, 22, 19, 37, 13, 35, 18, 4, 23, 23, 2, 36, 24, 17, 6, 37, 26, 31, 37, 25, 9, 36, 37, 18, 32, 23, 24, 38, 30, 21, 33, 16, 30, 32, 21, 32, 12, 9, 24, 30, 22, 8, 24, 29, 32, 27, 30, 34, 37, 15, 21, 30, 24, 7, 28, 7, 5, 13, 28, 6, 30, 10, 38, 29, 27, 7, 11, 6, 31, 8, 32, 16, 31, 29, 31, 1, 2, 13, 19, 3, 5, 18, 34, 33, 39, 8, 29, 14, 22, 36, 29, 6, 6, 0, 19, 3, 13, 32, 16, 25, 35, 33, 17, 13, 18, 6, 4, 32, 27, 15, 28, 23, 17, -1,
                    23, 16, 13, 13, 17, 1, 6, 13, 9, 37, 38, 20, 23, 38, 19, 21, 24, 1, 24, 26, 24, 12, 37, 3, 6, 35, 14, 38, 2, 18, 3, 25, 22, 27, 10, 37, 10, -1,
                    23, 26, 35, 7, 28, 13, 34, 10, 1, 13, 2, 28, 34, 31, 17, 2, 9, 5, 19, 21, 9, 3, 35, 37, 25, 37, 19, 9, 15, 8, 21, 22, 34, 36, 9, 7, 1, 24, 1, 14, 15, 33, -1,
                    13, 0, 25, 19, 22, 31, 7, 24, 30, 6, 33, 13, 26, 34, 12, 31, 10, 5, 25, 9, 18, 35, 15, 33, 27, 20, 38, 22, 19, 30, 2, 26, 32, 9, 4, 25, 22, 21, 21, 12, 3, 9, 2, 10, 2, 28, 1, 25, 25, 13, 36, 31, -1,
                    5, 32, 3, 2, 3, 39, 23, 37, 16, 21, 27, 25, 9, 11, 13, 13, 29, 5, 9, 16, 39, 21, 9, 23, 27, 19, 33, 1, 22, 22, 26, 22, 6, 1, 7, 3, 13, 32, 33, 21, 4, 4, 14, 35, 25, 3, 24, 15, 14, 25, 24, 23, 0, 39, 2, 26, 6, 10, 18, 37, 13, 16, 4, 23, 10, 14, 12, 8, 36, 19, -1,
                    33, 27, 35, 30, 36, 14, 32, 28, 10, 12, 17, 34, 19, 29, 16, 18, 36, 7, 39, 25, 28, 9, 20, 13, 12, 36);
            default -> throw new RuntimeException("dumbass");
        };
    }

    public static long thousand = 1000L;
    public static long million = 1000000L;
    public static long billion = 1000000000L;

    public static String time(long nanotime) {
        return nanotime / billion != 0 ? nanotime / billion + " seconds" :
                nanotime / million != 0 ? nanotime / million + " milliseconds" :
                        nanotime / thousand != 0 ? nanotime / thousand + " microseconds" :
                                nanotime + " nanoseconds";
    }
}
